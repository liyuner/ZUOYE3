import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from collections import Counter
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import metrics
from pprint import pprint
from time import time
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline

from sklearn.metrics import classification_report

from data_loader.cnews_loader import *
%config InlineBackend.figure_format = 'retina'
%matplotlib inline

#预处理
# 设置数据读取、模型、结果保存路径
base_dir = '/home/kesci/input/new3021'
train_dir = os.path.join(base_dir, 'cnews.train.txt')
test_dir = os.path.join(base_dir, 'cnews.test.txt')
val_dir = os.path.join(base_dir, 'cnews.val.txt')
vocab_dir = os.path.join(base_dir, 'cnews.vocab.txt')
save_dir = 'checkpoints/textcnn'
save_path = os.path.join(save_dir, 'best_validation')

train_contents, train_labels = read_file(train_dir)
test_contents, test_labels = read_file(test_dir)
val_counts = Counter(train_labels)
val_counts

#移除特殊字符
import re
#去除文本中的表情字符（只保留中英文和数字）
def clear_character(sentence):
    pattern1= '\[.*?\]'     
    pattern2 = re.compile('[^\u4e00-\u9fa5^a-z^A-Z^0-9]')   
    line1=re.sub(pattern1,'',sentence)
    line2=re.sub(pattern2,'',line1)   
    new_sentence=''.join(line2.split()) #去除空白
    return new_sentence

train_text=list(map(lambda s: clear_character(s), train_contents))
test_text=list(map(lambda s: clear_character(s), test_contents))

#分词
import jieba
train_seg_text=list(map(lambda s: jieba.lcut(s), train_text))
test_seg_text=list(map(lambda s: jieba.lcut(s), test_text))

#去除停用词
stop_words_path = "/home/kesci/project/data_loader/百度停用词列表.txt"
def get_stop_words():
    file = open(stop_words_path, 'rb').read().decode('gbk').split('\r\n')
    return set(file)
stopwords = get_stop_words()

# 去掉文本中的停用词
def drop_stopwords(line, stopwords):
    line_clean = []
    for word in line:
        if word in stopwords:
            continue
        line_clean.append(word)
    return line_clean

train_st_text=list(map(lambda s: drop_stopwords(s,stopwords), train_seg_text))
test_st_text=list(map(lambda s: drop_stopwords(s,stopwords), test_seg_text))

#标签映射
le = LabelEncoder()
le.fit(train_labels)
LabelEncoder()

label_train_id=le.transform(train_labels)
label_test_id=le.transform(test_labels)

train_c_text=list(map(lambda s: ' '.join(s), train_st_text))
test_c_text=list(map(lambda s: ' '.join(s), test_st_text))

tfidf_model = TfidfVectorizer(binary=False,token_pattern=r"(?u)\b\w+\b")
train_Data = tfidf_model.fit_transform(train_c_text)
test_Data = tfidf_model.transform(test_c_text)

#逻辑回归
import time
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, roc_auc_score, roc_curve
from sklearn.preprocessing import label_binarize
from itertools import cycle

# 开始计时
start_time = time.time()

'''LR模型分类训练'''
classifier = LogisticRegression(max_iter=1000)  # 增加迭代次数保证收敛
classifier.fit(train_Data, label_train_id)
pred = classifier.predict(test_Data)

# 计算执行时间
execution_time = time.time() - start_time
print(f"\n模型执行时间: {execution_time:.4f} 秒")

# 输出分类报告
print("分类评估报告:")
print(classification_report(label_test_id, pred, digits=4))

# 计算ROC AUC指标并绘制ROC曲线
y_prob = classifier.predict_proba(test_Data)  # 获取预测概率

if len(np.unique(label_test_id)) == 2:  # 二分类场景
    roc_auc = roc_auc_score(label_test_id, y_prob[:, 1])
    print(f"\nROC AUC (二分类): {roc_auc:.4f}")
    
    # 绘制ROC曲线
    fpr, tpr, _ = roc_curve(label_test_id, y_prob[:, 1])
    plt.figure(figsize=(8, 6))
    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve (Binary)')
    plt.legend(loc="lower right")
    plt.show()

else:  # 多分类场景
    y_test_bin = label_binarize(label_test_id, classes=np.unique(label_test_id))
    n_classes = y_test_bin.shape[1]
    
    # 计算每个类别的ROC曲线和AUC
    fpr = dict()
    tpr = dict()
    roc_auc = dict()
    for i in range(n_classes):
        fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_prob[:, i])
        roc_auc[i] = roc_auc_score(y_test_bin[:, i], y_prob[:, i])
    
    # 计算宏平均ROC曲线和AUC（手动计算，不依赖 multi_class="ovr"）
    all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))
    mean_tpr = np.zeros_like(all_fpr)
    for i in range(n_classes):
        mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])
    mean_tpr /= n_classes
    fpr["macro"] = all_fpr
    tpr["macro"] = mean_tpr
    roc_auc["macro"] = np.mean(list(roc_auc.values()))  # 手动计算宏平均AUC
    
    # 绘制ROC曲线
    plt.figure(figsize=(8, 6))
    colors = cycle(['aqua', 'darkorange', 'cornflowerblue', 'green', 'red'])
    for i, color in zip(range(n_classes), colors):
        plt.plot(fpr[i], tpr[i], color=color, lw=2,
                 label=f'Class {i} (AUC = {roc_auc[i]:.2f})')
    
    plt.plot(fpr["macro"], tpr["macro"], color='deeppink', linestyle=':', lw=4,
             label=f'Macro-average (AUC = {roc_auc["macro"]:.2f})')
    
    plt.plot([0, 1], [0, 1], 'k--', lw=2)
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve (Multiclass)')
    plt.legend(loc="lower right")
    plt.show()
    
    print(f"\nROC AUC (多分类 OvR Macro): {roc_auc['macro']:.4f}")

#随机森林
import time
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score, roc_curve
from sklearn.preprocessing import label_binarize
from itertools import cycle

# 记录开始时间
start_time = time.time()

# 训练随机森林模型
clf = RandomForestClassifier(criterion='gini', random_state=0)
clf.fit(train_Data, label_train_id)
pred = clf.predict(test_Data)

# 计算执行时间
execution_time = time.time() - start_time
print(f"\n模型执行时间: {execution_time:.4f} 秒")

# 输出分类报告
print("\n分类评估报告:")
print(classification_report(label_test_id, pred, digits=4))

# 获取预测概率（随机森林可以直接使用predict_proba）
y_prob = clf.predict_proba(test_Data)

# 判断是二分类还是多分类
n_classes = len(np.unique(label_test_id))

if n_classes == 2:  # 二分类
    # 计算AUC
    auc = roc_auc_score(label_test_id, y_prob[:, 1])
    print(f"\nROC AUC (二分类): {auc:.4f}")
    
    # 计算ROC曲线
    fpr, tpr, _ = roc_curve(label_test_id, y_prob[:, 1])
    
    # 绘制ROC曲线
    plt.figure(figsize=(8, 6))
    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {auc:.2f})')
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve (Binary Classification)')
    plt.legend(loc="lower right")
    plt.show()

else:  # 多分类
    # 二值化标签
    y_test_bin = label_binarize(label_test_id, classes=np.unique(label_test_id))
    
    # 计算每个类别的ROC曲线和AUC
    fpr = dict()
    tpr = dict()
    roc_auc = dict()
    
    for i in range(n_classes):
        fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_prob[:, i])
        roc_auc[i] = roc_auc_score(y_test_bin[:, i], y_prob[:, i])
    
    # 计算宏平均
    all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))
    mean_tpr = np.zeros_like(all_fpr)
    for i in range(n_classes):
        mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])
    mean_tpr /= n_classes
    fpr["macro"] = all_fpr
    tpr["macro"] = mean_tpr
    roc_auc["macro"] = np.mean(list(roc_auc.values()))
    
    # 绘制所有类别的ROC曲线
    plt.figure(figsize=(8, 6))
    colors = cycle(['aqua', 'darkorange', 'cornflowerblue', 'green', 'red'])
    for i, color in zip(range(n_classes), colors):
        plt.plot(fpr[i], tpr[i], color=color, lw=2,
                 label=f'Class {i} (AUC = {roc_auc[i]:.2f})')
    
    # 绘制宏平均ROC曲线
    plt.plot(fpr["macro"], tpr["macro"],
             color='deeppink', linestyle=':', linewidth=4,
             label=f'Macro-average (AUC = {roc_auc["macro"]:.2f})')
    
    plt.plot([0, 1], [0, 1], 'k--', lw=2)
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve (Multi-Class)')
    plt.legend(loc="lower right")
    plt.show()
    
    print(f"\nROC AUC (宏平均): {roc_auc['macro']:.4f}")

#支持向量机
import time
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import classification_report, roc_auc_score, roc_curve
from sklearn.preprocessing import label_binarize
from itertools import cycle

# 记录开始时间
start_time = time.time()

# 训练SVM模型（注意：SVC需要设置probability=True才能用predict_proba）
clf = svm.SVC(probability=True, random_state=0)  # 必须设置probability=True
clf.fit(train_Data, label_train_id)
pred = clf.predict(test_Data)

# 计算执行时间
execution_time = time.time() - start_time
print(f"\n模型执行时间: {execution_time:.4f} 秒")

# 输出分类报告
print("\n分类评估报告:")
print(classification_report(label_test_id, pred, digits=4))

# 获取预测概率（SVC需要probability=True）
y_prob = clf.predict_proba(test_Data)

# 判断是二分类还是多分类
n_classes = len(np.unique(label_test_id))

if n_classes == 2:  # 二分类
    # 计算AUC
    auc = roc_auc_score(label_test_id, y_prob[:, 1])
    print(f"\nROC AUC (二分类): {auc:.4f}")
    
    # 计算ROC曲线
    fpr, tpr, _ = roc_curve(label_test_id, y_prob[:, 1])
    
    # 绘制ROC曲线
    plt.figure(figsize=(8, 6))
    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {auc:.2f})')
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve (Binary Classification)')
    plt.legend(loc="lower right")
    plt.show()

else:  # 多分类
    # 二值化标签
    y_test_bin = label_binarize(label_test_id, classes=np.unique(label_test_id))
    
    # 计算每个类别的ROC曲线和AUC
    fpr = dict()
    tpr = dict()
    roc_auc = dict()
    
    for i in range(n_classes):
        fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_prob[:, i])
        roc_auc[i] = roc_auc_score(y_test_bin[:, i], y_prob[:, i])
    
    # 计算宏平均
    all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))
    mean_tpr = np.zeros_like(all_fpr)
    for i in range(n_classes):
        mean_tpr += np.interp(all_fpr, fpr[i], tpr[i])
    mean_tpr /= n_classes
    fpr["macro"] = all_fpr
    tpr["macro"] = mean_tpr
    roc_auc["macro"] = np.mean(list(roc_auc.values()))
    
    # 绘制所有类别的ROC曲线
    plt.figure(figsize=(8, 6))
    colors = cycle(['aqua', 'darkorange', 'cornflowerblue', 'green', 'red'])
    for i, color in zip(range(n_classes), colors):
        plt.plot(fpr[i], tpr[i], color=color, lw=2,
                 label=f'Class {i} (AUC = {roc_auc[i]:.2f})')
    
    # 绘制宏平均ROC曲线
    plt.plot(fpr["macro"], tpr["macro"],
             color='deeppink', linestyle=':', linewidth=4,
             label=f'Macro-average (AUC = {roc_auc["macro"]:.2f})')
    
    plt.plot([0, 1], [0, 1], 'k--', lw=2)
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve (Multi-Class)')
    plt.legend(loc="lower right")
    plt.show()
    
    print(f"\nROC AUC (宏平均): {roc_auc['macro']:.4f}")